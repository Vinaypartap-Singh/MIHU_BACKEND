generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String        @id @default(uuid())
  name                    String
  email                   String        @unique
  password                String
  profileImage            String?
  bio                     String? // Short user bio
  enableTwoFactorEmail    Boolean       @default(false)
  twoFactorEmail          String?
  twoFactorEmailOTP       Int?
  twoFactorEmailOTPExpiry DateTime?
  emailVerified           Boolean       @default(false)
  emailVerifyOtp          Int?
  emailVerifyOtpExpiry    DateTime?
  passwordResetOtp        Int?
  passwordResetOtpExpiry  DateTime?
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  posts                   Post[]
  comments                Comment[]
  likes                   Like[]
  socialMediaLinks        SocialMedia[]
  followers               Follower[]    @relation("Followers") // Users who follow this user
  following               Follower[]    @relation("Following") // Users this user is following
}

model Post {
  id        String    @id @default(uuid())
  content   String
  imageUrl  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  comments  Comment[]
  likes     Like[]
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
}

model Follower {
  id          String   @id @default(uuid())
  follower    User     @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User     @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String
  createdAt   DateTime @default(now())
}

model SocialMedia {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  platform  String // E.g., "Facebook", "Instagram"
  username  String
  url       String? // Optional link to the user's profile on the platform
  createdAt DateTime @default(now())
}
